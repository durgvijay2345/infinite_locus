const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const user = require('../models/userModel');
const jwt=require('jsonwebtoken');
const registerUser=async (req,res)=>{
   try{
     // Logic for registering a user
    const {name,email,password,role} = req.body;
    if(!name || !email || !password || !role){
        return res.status(400).json({message: "All fields are required"});
    }

    const alreadyExists = await user.findOne({email});
    if(alreadyExists){
        return res.status(400).json({message: "User already exists"});
    }
    // Hash the password before saving
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
     const newUser = new user({
        name,
        email,
        password:hashedPassword,
        role
    });
     
    await newUser.save();
    res.status(201).json({message: "User registered successfully"});
   }
   catch(error){
    console.log(error);
    res.status(500).json({message: "Internal server error"});
   }
}

const loginUser= async (req,res)=>{
    try{
       const {email,password} = req.body;
       if(!email || !password){
        return res.status(400).json({message: "All fields are required"});
       }
       // check if user already exists
       const User=await user.findOne({email});
       if(!user){
        return res.status(400).json({message:"Invalid Credentials"});
       }
       // match password
       const isMatch=bcrypt.compare(User.password,password);
       if(!isMatch){
        return res.status(400).json({message:"Invalid credentials"});
       }
       const token=jwt.sign({id:User.id},process.env.JWT_SECRET,{expiresIn:'1d'});
       res.status(200).json({
        message:"Login Successfully",
        token,
        User:{
            id:user._id,
            name:User.name,
            email,
            role
        }
       })
    }
    catch(error){
        console.log(error);
        res.status(500).json({message: "Internal server error"});
    }
}

// logout controller
const logout=async (req,res)=>{
   try{
      res.clearCookie('token',{
        httpOnly:false,
        secure:false,
        sameSite:'None'
      });
      return res.status(200).json({message:"logout sucessfully"})

   }
   catch(error){
    console.log(error);
    res.status(500).json({message:"logout error"})
   }
}
module.exports={registerUser,loginUser};